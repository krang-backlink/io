// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIServerClient is the client API for APIServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIServerClient interface {
	CompleteTask(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aPIServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServerClient(cc grpc.ClientConnInterface) APIServerClient {
	return &aPIServerClient{cc}
}

func (c *aPIServerClient) CompleteTask(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/krang.APIServer/CompleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServerServer is the server API for APIServer service.
// All implementations must embed UnimplementedAPIServerServer
// for forward compatibility
type APIServerServer interface {
	CompleteTask(context.Context, *CompleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAPIServerServer()
}

// UnimplementedAPIServerServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServerServer struct {
}

func (UnimplementedAPIServerServer) CompleteTask(context.Context, *CompleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedAPIServerServer) mustEmbedUnimplementedAPIServerServer() {}

// UnsafeAPIServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServerServer will
// result in compilation errors.
type UnsafeAPIServerServer interface {
	mustEmbedUnimplementedAPIServerServer()
}

func RegisterAPIServerServer(s grpc.ServiceRegistrar, srv APIServerServer) {
	s.RegisterService(&APIServer_ServiceDesc, srv)
}

func _APIServer_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServerServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/krang.APIServer/CompleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServerServer).CompleteTask(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIServer_ServiceDesc is the grpc.ServiceDesc for APIServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "krang.APIServer",
	HandlerType: (*APIServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompleteTask",
			Handler:    _APIServer_CompleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
