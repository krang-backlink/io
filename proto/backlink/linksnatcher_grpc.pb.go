// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: backlink/linksnatcher.proto

package linksnatcherGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BacklinksServiceClient is the client API for BacklinksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BacklinksServiceClient interface {
	GetBacklinks(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Response, error)
}

type backlinksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBacklinksServiceClient(cc grpc.ClientConnInterface) BacklinksServiceClient {
	return &backlinksServiceClient{cc}
}

func (c *backlinksServiceClient) GetBacklinks(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/linksnatcherGrpc.BacklinksService/GetBacklinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BacklinksServiceServer is the server API for BacklinksService service.
// All implementations must embed UnimplementedBacklinksServiceServer
// for forward compatibility
type BacklinksServiceServer interface {
	GetBacklinks(context.Context, *Req) (*Response, error)
	mustEmbedUnimplementedBacklinksServiceServer()
}

// UnimplementedBacklinksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBacklinksServiceServer struct {
}

func (UnimplementedBacklinksServiceServer) GetBacklinks(context.Context, *Req) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBacklinks not implemented")
}
func (UnimplementedBacklinksServiceServer) mustEmbedUnimplementedBacklinksServiceServer() {}

// UnsafeBacklinksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BacklinksServiceServer will
// result in compilation errors.
type UnsafeBacklinksServiceServer interface {
	mustEmbedUnimplementedBacklinksServiceServer()
}

func RegisterBacklinksServiceServer(s grpc.ServiceRegistrar, srv BacklinksServiceServer) {
	s.RegisterService(&BacklinksService_ServiceDesc, srv)
}

func _BacklinksService_GetBacklinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacklinksServiceServer).GetBacklinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linksnatcherGrpc.BacklinksService/GetBacklinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacklinksServiceServer).GetBacklinks(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// BacklinksService_ServiceDesc is the grpc.ServiceDesc for BacklinksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BacklinksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linksnatcherGrpc.BacklinksService",
	HandlerType: (*BacklinksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBacklinks",
			Handler:    _BacklinksService_GetBacklinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backlink/linksnatcher.proto",
}
